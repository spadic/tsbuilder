#pragma once

// fles_ipc
#include "MicrosliceDescriptor.hpp"
// system
#include <vector>

namespace fles {

struct MicrosliceContainer;

/**
 * Represents a source of microslices which would form one component of
 * one of a sequence of timeslices, each.
 */
class MicrosliceSource {
public:
    MicrosliceSource(uint16_t eq_id, uint8_t sys_id, uint8_t sys_ver,
                     uint64_t start_index=0);
    /**< Configure the metadata for all microslices that are generated by
     * this source. */
    void add(std::vector<uint8_t> content);
    /**< Create a new microslice with the given payload. The microslice
     * index contained in the descriptor is automatically incremented. */
    MicrosliceContainer get(uint64_t mc_index);
    /**< Return the microslice at the given index. If no microslice was
     * added at this index, an empty microslice is returned. */
    size_t size();
    /**< Return the number of added microslices. **/

    const uint64_t start_index;

private:
    const uint16_t _eq_id;
    const uint8_t _sys_id;
    const uint8_t _sys_ver;
    MicrosliceDescriptor _desc(uint64_t index);
    std::vector<MicrosliceContainer> _microslices;
};

}
