#include "MicrosliceDescriptor.hpp"
#include <unordered_map>
#include <vector>

namespace fles {

/**
 * Combines microslice metadata plus payload.
 */
struct MicrosliceContainer {
    MicrosliceDescriptor desc;
    uint8_t *content;
};

/**
 * Represents a source of microslices which would form one component of a
 * timeslice.
 */
class MicrosliceSource {
public:
    MicrosliceSource(uint16_t eq_id, uint8_t sys_id, uint8_t sys_ver);
    /**< Set the metadata that is fixed for all microslices that are
     * generated by this source. */
    void add(uint64_t mc_index, std::vector<uint8_t> content);
    /**< Create a new microslice with a given index and payload.
     * Microslices previously added at the same index are overwritten. */
    MicrosliceContainer get(uint64_t mc_index);
    /**< Return the microslice at the given index. If no microslice was
     * added at this index, an empty microslice is returned. */

private:
    uint16_t _eq_id;
    uint8_t _sys_id;
    uint8_t _sys_ver;
    MicrosliceDescriptor _desc(uint64_t index, uint32_t size);
    std::unordered_map<uint64_t, MicrosliceContainer> _microslices;
};

}
